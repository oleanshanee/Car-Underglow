#include <FastLED.h>
#define LEFT_PIN_1 0  //top left brake strip
#define LEFT_PIN_2 1  //botom left brake strip
#define LEFT_PIN_3 2  //top left signal strip
#define LEFT_PIN_4 3  //bottom left signal strip

#define RIGHT_PIN_1 4  //top right brake strip 
#define RIGHT_PIN_2 5  //bottom right brake strip 
#define RIGHT_PIN_3 6  //top right signal strip 
#define RIGHT_PIN_4 7  //bottom right signal strip

#define brakeRunning 8     //The headlight switch signal
#define brakeSwitch 9      //The brake depression signal
#define turnSignalLeft 10   //Left turn signal
#define turnSignalRight 11  //Right turn signal
#define reverseLight 12     //The reverse light signal
#define functionPin A0
#define NUM_LEDS 18        //The number of LEDs per strip
#define NUM_STRIPS 8      //The number of strips

//Create a CRGB object for each strip (left and right)
CRGB leftOne[NUM_LEDS];
CRGB leftTwo[NUM_LEDS];
CRGB leftThree[NUM_LEDS];
CRGB leftFour[NUM_LEDS];
CRGB rightOne[NUM_LEDS];
CRGB rightTwo[NUM_LEDS];
CRGB rightThree[NUM_LEDS];
CRGB rightFour[NUM_LEDS];


//Create a pointer array to hold locations of each strip. This way, we can easily make assignments with for loops.
CRGB* ledArray[8] = {leftOne, leftTwo, leftThree, leftFour, rightOne, rightTwo, rightThree, rightFour};
//On the real version in Camry tail lights, a new CRGB* array will need to be made for each block of strips.
//For example, if there ends up being a block in the turn signal area, a block in the brake light are, and a block in the trunk portion, these will all need to have their own CRGB* arrays which will also need to be synced up in each function.




//We have an array which holds pointers to each of the strips.
//The strips can still be accessed individually if wanted. They can also be accessed and assigned by the array in a for loop
//Use something like (ledArray[0])[10] = CRGB(255,255,255); to access a specific LED on a specific row. This means you are accessing the tenth element of leftOne and assigning a CRGB object.
//Now the strips should basically behave like a 2-D array, so it will be easy to draw pixel art and stuff.

//try something like this (ledArray[i])[j, j-1, j-1, j-3] = CRGB(255,0,0);

//Setup of the function potentiometer using pin A5
int functionMapped = 0;
int functionAnalogValue = 0;
unsigned const long flashInterval = 5000;
unsigned long lastBrake = millis();

void setup() {
	//Enable the pullup resistor in the Arudino for the five digital inputs we will use as buttons
	pinMode(8, INPUT_PULLUP);
	pinMode(9, INPUT_PULLUP);
	pinMode(10, INPUT_PULLUP);
	pinMode(11, INPUT_PULLUP);
	pinMode(12, INPUT_PULLUP);
	
	//Add the strips to the FastLED instance
	FastLED.addLeds<WS2812, LEFT_PIN_1, GRB>(leftOne, NUM_LEDS);
	FastLED.addLeds<WS2812, LEFT_PIN_2, GRB>(leftTwo, NUM_LEDS);
	FastLED.addLeds<WS2812, LEFT_PIN_3, GRB>(leftThree, NUM_LEDS);
	FastLED.addLeds<WS2812, LEFT_PIN_4, GRB>(leftFour, NUM_LEDS);
	FastLED.addLeds<WS2812, RIGHT_PIN_1, GRB>(rightOne, NUM_LEDS);
	FastLED.addLeds<WS2812, RIGHT_PIN_2, GRB>(rightTwo, NUM_LEDS);
	FastLED.addLeds<WS2812, RIGHT_PIN_3, GRB>(rightThree, NUM_LEDS);
	FastLED.addLeds<WS2812, RIGHT_PIN_4, GRB>(rightFour, NUM_LEDS);
    Serial.begin(9600);
}

void loop(){
	for(int i = 0; i < NUM_STRIPS; i++){
		for(int j = 0; j < NUM_LEDS; j++){
			(ledArray[i])[j] = CRGB(180,0,0);
		}
	}
	FastLED.show();
}